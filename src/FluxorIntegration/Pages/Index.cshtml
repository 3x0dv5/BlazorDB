@using Blazor.Fluxor
@using FluxorIntegration.Store.Movies
@using FluxorIntegration.Store.Reviews
@page "/"

@inject IState<MovieState> State
@inject IState<ReviewsState> ReviewState
@inject IDispatcher Dispatcher

<h1>Movie Reviews</h1>

<h2>Notes</h2>

<ul>
    <li>You can click "Insert Seed Data" to insert some data into the database, or:</li>
    <li>Add one or more movie in the form below</li>
    <li>For a movie you can click "Load Reviews"</li>
    <li>You can add one or more reviews to a movie</li>
    <li>You can refresh the page, and click "Load Movies" again to retreive your saved data</li>
    <li>View the store Folder to see the Fluxor code that controls the BlazorDB code</li>
    <li>If you have Redux chrome devtools installed, you may view the state in the devtools console.</li>
</ul>

<h2>Movies</h2>

<button class="btn btn-info" onclick="@OnLoadMovies">Load Movies</button>
<button class="btn btn-info" onclick="@OnInsertSeedData">Insert Seed Data</button>
<button class="btn btn-info" onclick="@OnDebug">Print to Console</button>

@if (State.Current.Movies.Count > 0)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Reviews</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var movie in State.Current.Movies)
            {
                <tr>
                    <td>@movie.Id</td>
                    <td>@movie.Name</td>
                    <td><button class="btn btn-outline-primary" onclick="@(e => OnReviewClick(movie.Id))">Load Reviews</button></td>
                    <td><Button class="btn btn-outline-danger" onclick="@(e => OnDeleteMovie(movie.Id))">Delete</Button></td>
                </tr>
            }
        </tbody>
    </table>
}

<h3>Add New Movie</h3>
<form>
    <div class="form-group">
        <label for="movieName">Name:</label> <input id="movieName" class="form-control" type="text" bind="@_newMovieName" />
    </div>
    <input type="submit" class="btn btn-primary" value="Add Movie" onclick="@OnAddMovie" />
</form>

@if (ReviewState.Current.MovieId != 0)
{
    <h2>Reviews</h2>

    @if (ReviewState.Current.Reviews != null)
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Stars</th>
                    <th>Comment</th>
                    <th>Delete</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var review in ReviewState.Current.Reviews)
                {
                    <tr>
                        <td>@review.Id</td>
                        <td>@review.Stars</td>
                        <td>@review.Comment</td>
                        <td><Button class="btn btn-outline-danger" onclick="@(e => OnDeleteReview(ReviewState.Current.MovieId, review.Id))">Delete</Button></td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <h3>Add New Review</h3>
    <form>
        <div class="form-group">
            <label for="stars">Stars:</label> <input id="stars" class="form-control" type="number" bind="@_newStars" />
        </div>
        <div class="form-group">
            <label for="comment">Comment:</label> <input id="comment" class="form-control" type="text" bind="@_newComment" />
        </div>
        <input type="submit" class="btn btn-primary" value="Add Review" onclick="@(e => OnAddReview(ReviewState.Current.MovieId))" />
    </form>
}

@functions {
    string _newMovieName;
    int _newStars;
    string _newComment;

    async void OnAddMovie()
    {
        await Dispatcher.DispatchAsync(new AddMovieAction(_newMovieName));
        _newMovieName = "";
        StateHasChanged();
    }

    async void OnLoadMovies()
    {
        await Dispatcher.DispatchAsync(new LoadMoviesAction());
        StateHasChanged();
    }

    async void OnReviewClick(int movieId)
    {
        await Dispatcher.DispatchAsync(new LoadReviewsAction(movieId));
        StateHasChanged();
    }

    async void OnAddReview(int movieId)
    {
        await Dispatcher.DispatchAsync(new AddReviewAction(movieId, _newStars, _newComment));
        _newStars = 0;
        _newComment = "";
        StateHasChanged();
    }

    async void OnDeleteReview(int movieId, int reviewId)
    {
        await Dispatcher.DispatchAsync(new DeleteReviewAction(movieId, reviewId));
        StateHasChanged();
    }

    async void OnDeleteMovie(int movieId)
    {
        await Dispatcher.DispatchAsync(new DeleteMovieAction(movieId));
        StateHasChanged();
    }

    async void OnInsertSeedData()
    {
        await Dispatcher.DispatchAsync(new InsertSeedMoviesAction());
        StateHasChanged();
    }

    async void OnDebug()
    {
        await Dispatcher.DispatchAsync(new LogContextAction());
    }
}